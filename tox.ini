[tox]
min_version = 4.25
requires =
    tox-uv>=1

env_list =
    py3.11-numpy_latest-vtk_9.2.6
    py3.12-numpy_latest-vtk_9.3.1
    py3.13-numpy_latest-vtk_9.4.2
    py3.13-numpy_nightly-vtk_latest
    py3.{10-13}
    py3.{10-13}-vtk_dev

# ================= DEFAULT ENVIRONMENTS =================
[testenv]
description = Run the tests for python {basepython}
package =
    cov: editable # Otherwise, the coverage is not computed correctly
    !cov: wheel
wheel_build_env = .pkg

passenv =
    PYVISTA*
    TRAME*
    JUPYTER*
    PLOT_SKIP*
    DISPLAY
    XAUTHORITY
    ALLOW_PLOTTING
    PYTEST*
    GITHUB*
    *SSL*
    COVERAGE*
    CI*
    MESA*
    VTK*
    DISPLAY*
    UV_INDEX
    PIP_INDEX_URL
    PIP_TRUSTED_HOST

setenv =
    TOX_ROOT = {tox_root}
    PYTEST_ADDOPTS = --color=yes -v {env:PARALLEL:}

dependency_groups = test
deps =
    numpy_1.23: numpy ~= 1.23.0
    numpy_1.26: numpy ~= 1.26.0
    vtk_9.2.2: vtk == 9.2.2
    vtk_9.2.6: vtk == 9.2.6
    vtk_9.3.1: vtk == 9.3.1
    vtk_9.4.2: vtk == 9.4.2

commands_pre=
    numpy_nightly: uv pip uninstall numpy matplotlib
    numpy_nightly: UV_INDEX=https://pypi.anaconda.org/scientific-python-nightly-wheels/simple uv pip install --pre --no-deps matplotlib numpy
    vtk_dev: UV_INDEX=https://wheels.vtk.org uv pip install --upgrade vtk --pre --no-cache
    {[testenv]software_report_cmdline}

commands =
    {[testenv]all_testing_cmdline}

cov_flags =
    --cov \
    pyvista \
    --cov-config \
    {tox_root}{/}pyproject.toml \
    --cov-context \
    test \
    --cov-report \
    term:skip-covered \
    --cov-report \
    xml:coverage_{env_name}.xml \
    --cov-report \
    html:coverage_{env_name}

test_downloads = --test_downloads
disallow_unused_cache = --disallow_unused_cache
core_flags = --ignore=tests/plotting {[testenv]test_downloads}
plotting_flags = tests/plotting {[testenv]disallow_unused_cache}
all_flags = {[testenv]test_downloads} {[testenv]disallow_unused_cache}

all_testing_cmdline =
    !cov-core: pytest {[testenv]core_flags} {posargs}
    !cov-plotting: pytest {[testenv]plotting_flags} {posargs}
    cov-core: pytest {[testenv]core_flags} {[testenv]cov_flags} {posargs}
    cov-plotting: pytest {[testenv]plotting_flags} {[testenv]cov_flags} {posargs}
    !cov-!plotting-!core: pytest {[testenv]all_flags} {posargs}

software_report_cmdline=
    pyvista report --gpu --downloads

# ================= INTEGRATION ENVIRONMENTS =================
[testenv:integration-{trame,geovista,mne,pyvistaqt}]
description =
    trame: Run the integration tests for trame
    mne: Run the integration tests for mne
    geovista: Run the integration tests for geovista
    pyvistaqt: Run the integration tests for pyvistaqt

skip_install = true # added since commands_pre that install the target package might override the current pyvista installation
basepython =
    pyvistaqt: py3.12
    trame,mne,geovista: py3.13
dependency_groups =
    !mne: {[testenv]dependency_groups}
deps =
    mne: numpy
    mne: scipy
    mne: matplotlib
    mne: nibabel
    mne: qtpy
    mne: ipympl
    mne: ipyevents
    mne: pytest
    mne: pytest-cov
    mne: pytest-harvest
    mne: pytest-timeout
    mne: sphinx-gallery
    mne: nbformat
    mne: nbclient
    mne: imageio
    mne: imageio-ffmpeg
    mne,pyvistaqt: PyQt6-Qt6!=6.6.0,!=6.7.0
    mne,pyvistaqt: PyQt6!=6.6.0

setenv =
    GEOVISTA_HOME = {temp_dir}{/}geovista
    MNE_HOME = {temp_dir}{/}mne
    PYVISTAQT_HOME = {temp_dir}{/}pyvistaqt
    XDG_CACHE_HOME = {temp_dir}{/}.cache # for geovista pooch downloads
    XDG_DATA_HOME = {temp_dir}{/}.data # for cartopy url downloads
    GEOVISTA_POOCH_MUTE = true

    _GEOVISTA_ARGS = {env:GEOVISTA_HOME}{/}tests \
        --rootdir={env:GEOVISTA_HOME} \
        --image_cache_dir={env:GEOVISTA_HOME}{/}tests{/}plotting{/}image_cache

    _MNE_ARGS = {env:MNE_HOME}{/}mne{/}viz{/}_brain \
        {env:MNE_HOME}{/}mne{/}viz{/}tests{/}test_3d.py \
        {env:MNE_HOME}{/}mne{/}viz{/}backends \
        --rootdir={env:MNE_HOME}

    _PYVISTAQT_ARGS = {env:PYVISTAQT_HOME}/tests \
        --rootdir={env:PYVISTAQT_HOME}

allowlist_externals =
    git
    sh
    bash

change_dir =
    trame: examples_trame
    geovista,mne: {tox_root}

platform =
    mne: linux

commands_pre =
    # TRAME SETUP
    trame: uv pip install -r requirements.txt

    # GEOVISTA SETUP
    geovista: git clone https://github.com/bjlittle/geovista.git {env:GEOVISTA_HOME} --single-branch
    geovista: uv pip install {env:GEOVISTA_HOME}[test,exam,cmap]
    geovista: cartopy_feature_download physical --output {env:XDG_DATA_HOME}{/}cartopy --no-warn
    geovista: geovista download --all --decompress

    # MNE-PYTHON SETUP
    mne: git clone --depth=1 https://github.com/mne-tools/mne-python.git {env:MNE_HOME} --branch main --single-branch
    mne: bash -c 'if [ "$GITHUB_ACTIONS" = "true" ]; then {env:MNE_HOME}{/}tools{/}setup_xvfb.sh ; fi'
    mne: uv pip install git+https://github.com/pyvista/pyvistaqt.git
    mne: uv pip install {env:MNE_HOME}
    mne: mne sys_info -p
    mne: bash -c "cd {env:MNE_HOME} && ./tools/get_testing_version.sh"
    mne: bash -c "cd {env:MNE_HOME} && ./tools/github_actions_download.sh"
    mne: python -c "import pyvista; assert not pyvista.OFF_SCREEN, f'{pyvista.OFF_SCREEN=} should be False'"

    # PYVISTAQT SETUP
    pyvistaqt: git clone https://github.com/pyvista/pyvistaqt.git {env:PYVISTAQT_HOME} --single-branch
    pyvistaqt: uv pip install {env:PYVISTAQT_HOME} -r {env:PYVISTAQT_HOME}{/}requirements_test.txt

    # COMMON SETUP (CURRENT PYVISTA VERSION INSTALLATION)
    uv pip install {tox_root}
    {[testenv]software_report_cmdline}

commands =
    trame: pytest --color=yes -v tests {posargs}
    geovista: pytest --color=yes -v {env:_GEOVISTA_ARGS} {posargs}
    mne: pytest --color=yes -v {env:_MNE_ARGS} {posargs}
    pyvistaqt: pytest --color=yes -v {env:_PYVISTAQT_ARGS} {posargs}

commands_post =
    geovista: python -c "import shutil,os,stat;shutil.rmtree(os.environ['GEOVISTA_HOME'], onerror=lambda func, path, _: (os.chmod(path, stat.S_IWRITE), func(path)))"
    mne: python -c "import shutil,os,stat;shutil.rmtree(os.environ['MNE_HOME'], onerror=lambda func, path, _: (os.chmod(path, stat.S_IWRITE), func(path)))"
    pyvistaqt: python -c "import shutil,os,stat;shutil.rmtree(os.environ['PYVISTAQT_HOME'], onerror=lambda func, path, _: (os.chmod(path, stat.S_IWRITE), func(path)))"


# ================= TYPING ENVIRONMENT =================
[testenv:mypy]
description = Run mypy type checks
basepython = py3.13
setenv =
  MYPY_FORCE_COLOR = 1
  TERM = xterm-color
dependency_groups = typing
commands = mypy

# ================= DOCTESTING ENVIRONMENTS =================
[testenv:doctest-{modules,local}]
description =
    modules: Run doctest-modules with pytest
    local: Run doctest using docstring local namespace
basepython = py3.13
setenv =
    PYVISTA_OFF_SCREEN = true
    PYTEST_ADDOPTS = --color=yes -v {env:PARALLEL:}
commands =
	modules: pytest --doctest-modules --doctest-continue-on-failure {env_site_packages_dir}{/}pyvista {posargs}
    local: python tests/check_doctest_names.py

# ================= DOCUMENTATION ENVIRONMENTS =================
[testenv:docs-build]
description = Building documentation
basepython = py3.13
dependency_groups = docs
setenv =
    FORCE_COLOR = true
    PYDEVD_DISABLE_FILE_VALIDATION = 1
    PYVISTA_OFF_SCREEN = true
    ALLOW_PLOTTING = true
    SHELLOPTS = errexit:pipefail

    # SPHINX OPTIONS
    _SPHINX_JOBS = {env:PARALLEL:}
    _SPHINX_DEFAULTS = -w sphinx_warnings.txt -W --keep-going
    _SPHINX_SOURCE_DIR = source
    _SPHINX_BUILD_DIR = _build

change_dir = doc
commands_pre =
    {[testenv]software_report_cmdline}
    python -c "import subprocess, os;subprocess.run([r'{envpython}','make_tables.py'], cwd='{env:_SPHINX_SOURCE_DIR}', check=True)"
    python -c "import subprocess, os;subprocess.run([r'{envpython}','make_external_gallery.py'], cwd='{env:_SPHINX_SOURCE_DIR}', check=True)"
commands =
    python -m sphinx -M {posargs:html} {env:_SPHINX_SOURCE_DIR} {env:_SPHINX_BUILD_DIR} {env:_SPHINX_DEFAULTS} {env:_SPHINX_JOBS}

[testenv:docs-test]
description = Test documentation build (needs already built docs)
basepython = py3.13
dependency_groups = docs-test
setenv =
    PYTEST_ADDOPTS = --color=yes
commands_pre =
    {[testenv]software_report_cmdline}
commands =
    playwright install chromium
    pytest {tox_root}{/}tests{/}doc{/}tst_doc_build.py
    pytest --doc_mode -n2
