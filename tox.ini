[tox]
min_version = 4.25
requires =
    tox-uv>=1
    tox-gh-actions

env_list =
    py3.9-numpy_1.23-vtk_9.0.3
    py3.9-numpy_1.26-vtk_9.1
    py3.10-numpy_latest-vtk_9.2.2
    py3.11-numpy_latest-vtk_9.2.6
    py3.12-numpy_latest-vtk_9.3.1
    py3.13-numpy_latest-vtk_9.4.2
    py3.13-numpy_nightly-vtk_latest
    py3.{9-13}
    py3.{9-13}-vtk_main

[gh-actions]
python =
    3.9: py3.9
    3.10: py3.10
    3.11: py3.11
    3.12: py3.12
    3.13: py3.13

# ================= DEFAULT ENVIRONMENTS =================
[testenv]
description =
    !cov: Run the tests for python {basepython}
    cov: Run tests with coverage (to be added as a factor such as py3.11-cov)
package =
    cov: editable # Otherwise, the coverage is not computed correctly
    !cov: wheel
wheel_build_env = .pkg

passenv =
    PYVISTA*
    TRAME*
    JUPYTER*
    PLOT_SKIP*
    CI_WINDOWS
    DISPLAY
    XAUTHORITY
    ALLOW_PLOTTING
    PYTEST_ADDOPTS
    GITHUB_ACTIONS
    *SSL*
    COVERAGE*
    CI*
    MESA*
    VTK*
    DISPLAY*
    *

dependency_groups = test
deps =
    numpy_1.23: numpy ~= 1.23.0
    numpy_1.26: numpy ~= 1.26.0
    vtk_9.0.3: vtk == 9.0.3
    vtk_9.1: vtk == 9.1.0
    vtk_9.2.2: vtk == 9.2.2
    vtk_9.2.6: vtk == 9.2.6
    vtk_9.3.1: vtk == 9.3.1
    vtk_9.4.2: vtk == 9.4.2
    vtk_9.0.3,vtk_9.1: matplotlib < 3.6


commands_pre=
    numpy_nightly: uv pip uninstall numpy matplotlib
    numpy_nightly: uv pip install --pre --no-deps -i https://pypi.anaconda.org/scientific-python-nightly-wheels/simple matplotlib numpy
    vtk_main: uv pip install --upgrade vtk --pre --no-cache --extra-index-url https://wheels.vtk.org
    {[testenv]software_report_cmdline}

commands =
    {[testenv]all_testing_cmdline}

cov_flags =
    --cov \
    pyvista \
    --cov-config \
    {tox_root}{/}pyproject.toml \
    --cov-context \
    test \
    --cov-report \
    term:skip-covered \
    --cov-report \
    xml:coverage_{env_name}.xml \
    --cov-report \
    html:coverage_{env_name}

common_flags = --color=yes -v
image_flags = --fail_extra_image_cache --generated_image_dir debug_images
core_flags = --ignore=tests/plotting
plot_flags = tests/plotting {[testenv]image_flags}

all_testing_cmdline =
    !cov-core: pytest {[testenv]common_flags} {[testenv]core_flags} {posargs}
    !cov-plotting: pytest {[testenv]common_flags} {[testenv]plot_flags} {posargs}
    cov-core: pytest {[testenv]common_flags} {[testenv]core_flags} {[testenv]cov_flags} {posargs}
    cov-plotting: pytest {[testenv]common_flags} {[testenv]plot_flags} {[testenv]cov_flags} {posargs}
    !cov-!plotting-!core: pytest {[testenv]common_flags} {posargs}

software_report_cmdline=
    python -c "import pyvista;print(pyvista.Report(gpu=False));from pyvista import examples;print('User data path:', examples.USER_DATA_PATH)"

# ================= INTEGRATION ENVIRONMENTS =================
[testenv:integration-{trame,geovista,mne,pyvistaqt}]
description =
    trame: Run the integration tests for trame
    mne: Run the integration tests for mne
    geovista: Run the integration tests for geovista
    pyvistaqt: Run the integration tests for pyvistaqt

basepython =
    geovista,pyvistaqt: py3.12
    trame,mne: py3.13
dependency_groups =
    !mne: {[testenv]dependency_groups}
deps =
    mne: numpy
    mne: scipy
    mne: matplotlib
    mne: nibabel
    mne: qtpy
    mne: ipympl
    mne: ipyevents
    mne: pytest
    mne: pytest-cov
    mne: pytest-harvest
    mne: pytest-timeout
    mne: sphinx-gallery
    mne: nbformat
    mne: nbclient
    mne: imageio
    mne: imageio-ffmpeg
    mne,pyvistaqt: PyQt6-Qt6!=6.6.0,!=6.7.0
    mne,pyvistaqt: PyQt6!=6.6.0

setenv =
    GEOVISTA_HOME = {temp_dir}{/}geovista
    MNE_HOME = {temp_dir}{/}mne
    PYVISTAQT_HOME = {temp_dir}{/}pyvistaqt
    XDG_CACHE_HOME = {temp_dir}{/}.cache # for geovista pooch downloads
    XDG_DATA_HOME = {temp_dir}{/}.data # for cartopy url downloads
    GEOVISTA_POOCH_MUTE = true

    _GEOVISTA_ARGS = {env:GEOVISTA_HOME}{/}tests \
        --rootdir={env:GEOVISTA_HOME} \
        --image_cache_dir={env:GEOVISTA_HOME}{/}tests{/}plotting{/}image_cache

    _MNE_ARGS = {env:MNE_HOME}{/}mne{/}viz{/}_brain \
        {env:MNE_HOME}{/}mne{/}viz{/}tests{/}test_3d.py \
        {env:MNE_HOME}{/}mne{/}viz{/}backends \
        --rootdir={env:MNE_HOME}

    _PYVISTAQT_ARGS = {env:PYVISTAQT_HOME}/tests \
        --rootdir={env:PYVISTAQT_HOME}

allowlist_externals =
    git
    sh
    bash

change_dir =
    trame: examples_trame
    geovista,mne: {tox_root}

platform =
    mne: linux

commands_pre =
    trame: uv pip install -r requirements.txt

    # GEOVISTA SETUP
    geovista: git clone https://github.com/bjlittle/geovista.git {env:GEOVISTA_HOME} --single-branch
    geovista: uv pip install -e {env:GEOVISTA_HOME}[test,exam,cmap]
    geovista: python -m cartopy.feature.download physical --output {env:XDG_DATA_HOME}{/}cartopy --no-warn
    geovista: geovista download --all --decompress

    # MNE-PYTHON SETUP
    mne: git clone --depth=1 https://github.com/mne-tools/mne-python.git {env:MNE_HOME} --branch main --single-branch
    mne: bash -c 'if [ "$GITHUB_ACTIONS" = "true" ]; then {env:MNE_HOME}{/}tools{/}setup_xvfb.sh ; fi'
    mne: uv pip install git+https://github.com/pyvista/pyvistaqt.git
    mne: uv pip install -e {env:MNE_HOME}
    mne: mne sys_info -p
    mne: bash -c "cd {env:MNE_HOME} && ./tools/get_testing_version.sh"
    mne: bash -c "cd {env:MNE_HOME} && ./tools/github_actions_download.sh"

    # PYVISTAQT SETUP
    pyvistaqt: git clone https://github.com/pyvista/pyvistaqt.git {env:PYVISTAQT_HOME} --single-branch
    pyvistaqt: uv pip install -e {env:PYVISTAQT_HOME} -r {env:PYVISTAQT_HOME}{/}requirements_test.txt

commands =
    trame: pytest {tty:--color=yes} -v tests {posargs}
    geovista: pytest {tty:--color=yes} -v {env:_GEOVISTA_ARGS} {posargs}
    mne: pytest {tty:--color=yes} -v {env:_MNE_ARGS} {posargs}
    pyvistaqt: pytest {tty:--color=yes} -v {env:_PYVISTAQT_ARGS} {posargs}

commands_post =
    geovista: python -c "import shutil,os,stat;shutil.rmtree(os.environ['GEOVISTA_HOME'], onerror=lambda func, path, _: (os.chmod(path, stat.S_IWRITE), func(path)))"
    mne: python -c "import shutil,os,stat;shutil.rmtree(os.environ['MNE_HOME'], onerror=lambda func, path, _: (os.chmod(path, stat.S_IWRITE), func(path)))"
    pyvistaqt: python -c "import shutil,os,stat;shutil.rmtree(os.environ['PYVISTAQT_HOME'], onerror=lambda func, path, _: (os.chmod(path, stat.S_IWRITE), func(path)))"

# ================= PACKAGING ENVIRONMENTS =================
[testenv:package-{check,publish}]
dependency_groups = []
passenv = TWINE*
description =
    check: Check the package with twine
    publish: Publish the package with twine on PyPI
deps = twine
skip_install = true
commands=
    uv build --sdist --wheel --out-dir dist .
    check: twine check --strict dist/*
    publish: twine upload --skip-existing dist/pyvista*
commands_pre = []
commands_post = []

# ================= TYPING ENVIRONMENT =================
[testenv:mypy]
description = Run mypy type checks
basepython = py3.13
passenv =
    MYPY*
    TERM*
dependency_groups = typing
commands = mypy

# ================= DOCTESTING ENVIRONMENTS =================
[testenv:doctest-{modules,local}]
description =
    modules: Run doctest-modules with pytest
    local: Run doctest using docstring local namespace
basepython = py3.13
setenv =
    PYVISTA_OFF_SCREEN = true
commands =
	modules: pytest --color=yes -v --doctest-modules {env_site_packages_dir}{/}pyvista {posargs}
    local: python tests/check_doctest_names.py


# ================= DOCUMENTATION ENVIRONMENTS =================
[testenv:docs-{build}]
description =
    build: Building documentation
basepython = py3.13
dependency_groups = docs
setenv =
    FORCE_COLOR = true
    PYDEVD_DISABLE_FILE_VALIDATION = 1
    PYVISTA_OFF_SCREEN = true
    ALLOW_PLOTTING = true
    SHELLOPTS = errexit:pipefail

    # SPHINX OPTIONS
    _SPHINX_WARNINGS_FILE = sphinx_warnings.txt
    _SPHINX_DEFAULTS = -w {env:_SPHINX_WARNINGS_FILE} -W --keep-going
    _SPHINX_SOURCE_DIR = source
    _SPHINX_BUILD_DIR = _build

change_dir = doc
commands =
    # build commands
    build: python -m sphinx -M html {env:_SPHINX_SOURCE_DIR} {env:_SPHINX_BUILD_DIR} {env:_SPHINX_DEFAULTS} {posargs}
    build: pytest --color=yes -v {tox_root}{/}tests{/}doc{/}tst_doc_build.py

commands_post =
    build: python -c "from pathlib import Path;print(file.open('r').read() if (file:=Path('{env:_SPHINX_WARNINGS_FILE}')).exists() else '');"
    build: python -c "from pathlib import Path;print(file.open('r').read() if (file:=Path('errors.txt')).exists() else '');"
