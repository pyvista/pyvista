variables:
  ALLOW_PLOTTING: true
  SHELLOPTS: 'errexit:pipefail'

trigger:
  branches:
    include:
    - '*'
    exclude:
    - '*no-ci*'
  tags:
    include:
    - '*'

pr:
  branches:
    include:
    - '*'
    exclude:
    - '*no-ci*'

jobs:

# DESCRIPTION: Quickly check the spelling and documentation style
- job: CodeSpellStyle
  pool:
    vmImage: 'ubuntu-20.04'
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.7'
  - script: |
      pip install -r requirements_style.txt
      make doctest
    displayName: 'Run doctest'


# DESCRIPTION: Static code check
- job: StaticCodeCheck
  pool:
    vmImage: 'ubuntu-20.04'
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.8'
  - script: |
      pip install -r requirements_static.txt
      make mypy
    displayName: 'Run static code check'


# DESCRIPTION: Core API and doc string testing for Linux
- job: Linux
  pool:
    vmImage: 'ubuntu-20.04'
  variables:
    DISPLAY: ':99.0'
    PYVISTA_OFF_SCREEN: 'True'

  strategy:
    matrix:
      Python36:
        python.version: '3.6'
      Python37:
        python.version: '3.7'
      Python38:
        python.version: '3.8'
      Python39:
        python.version: '3.9'

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
    displayName: 'Use Python $(python.version)'

  - script: |
      PIP_CACHE_PATH=$(pip cache dir)
      echo "##vso[task.setvariable variable=PIP_CACHE_PATH]$PIP_CACHE_PATH"
      PYVISTA_VERSION=$(python -c "import io; exec(io.open('pyvista/_version.py').read()); print(__version__)")
      echo "##vso[task.setvariable variable=PYVISTA_VERSION]$PYVISTA_VERSION"
    displayName: 'Store pip cache path and pyvista version'

  - task: Cache@2
    inputs:
      key: 'PIP_WHEEL_CACHE | $(Agent.OS) | "$(python.version)" | "$(PYVISTA_VERSION)"'
      path: $(PIP_CACHE_PATH)
    displayName: Cache pip

  - script: |
      pip install wheel
      python setup.py bdist_wheel
      pip install dist/pyvista*.whl
    displayName: Build wheel and install pyvista

  - script: |
      .ci/setup_headless_display.sh
    displayName: Install headless display

  - script: |
      sudo apt-get install python3-tk
      pip install -r requirements_test.txt
      python -c "import pyvista; print(pyvista.Report())"
      which python
      pip list
    displayName: 'Install dependencies'

  - script: |
      pip install pytest-azurepipelines
      pytest -v --cov pyvista --cov-report html
    displayName: 'Test Core API'

  - script: |
      pytest -v --doctest-modules pyvista
    displayName: 'Test Package Docstrings'

  - script: |
      make doctest-modules-local-namespace
    displayName: 'Test Package Docstrings with Local Namespace'

  - script: |
      bash <(curl -s https://codecov.io/bash)
    displayName: 'Upload coverage to codecov.io'
    condition: eq(variables['python.version'], '3.7')

  - script: |
      pip install twine
      python setup.py sdist
      twine upload --skip-existing dist/pyvista*
    displayName: 'Upload to PyPi'
    condition: and(eq(variables['python.version'], '3.8'), contains(variables['Build.SourceBranch'], 'refs/tags/'))
    env:
      TWINE_USERNAME: __token__
      TWINE_PASSWORD: $(twine.password)
      TWINE_REPOSITORY_URL: "https://upload.pypi.org/legacy/"

  # don't run job on no-ci builds
  condition: not(contains(variables['System.PullRequest.SourceBranch'], 'no-ci'))


# DESCRIPTION: Core API testing for Windows
- job: Windows
  pool:
    vmIMage: 'windows-2019'
  variables:
    AZURE_CI_WINDOWS: 'true'
  strategy:
    maxParallel: 4
    matrix:
      Python36-64bit:
        python.version: '3.6'
      Python37-64bit:
        python.version: '3.7'
      Python38-64bit:
        python.version: '3.8'
      Python39-64bit:
        python.version: '3.9'
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: $(python.version)
      addToPath: true
  - powershell: |
      $PIP_CACHE_PATH = (pip cache dir) | Out-String
      echo "##vso[task.setvariable variable=PIP_CACHE_PATH]$PIP_CACHE_PATH"
      $PYVISTA_VERSION = $(python -c "import io; exec(io.open('pyvista/_version.py').read()); print(__version__)") | Out-String
      echo "##vso[task.setvariable variable=PYVISTA_VERSION]$PYVISTA_VERSION"
    displayName: 'Store pip cache path and pyvista version'
  - powershell: |
      Set-StrictMode -Version Latest
      $ErrorActionPreference = "Stop"
      $PSDefaultParameterValues['*:ErrorAction']='Stop'
      git clone --depth 1 git://github.com/pyvista/gl-ci-helpers.git
      powershell gl-ci-helpers/appveyor/install_opengl.ps1
    displayName: 'Install OpenGL'

  - script: |
      pip install wheel
      pip install .
      python -c "import pyvista; print(pyvista.Report(gpu=False))"
    displayName: 'Install PyVista'

  - script: |
      pip install -r requirements_test.txt
    displayName: 'Install test dependencies'

  - script: |
      python -m pytest --cov -v .
    displayName: 'Test Core API'

  # don't run job on no-ci builds
  condition: not(contains(variables['System.PullRequest.SourceBranch'], 'no-ci'))


# Builds the documentation
- job: BuildDocumentation
  pool:
    vmImage: 'ubuntu-20.04'

  variables:
    DISPLAY: ':99.0'
    PYVISTA_OFF_SCREEN: 'True'

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: 3.8
    displayName: 'Use Python 3.8'

  - script: |
      git config --global user.name ${GH_NAME}
      git config --global user.email ${GH_EMAIL}
      git config --list | grep user.
    displayName: 'Configure git'
    env:
      GH_NAME: $(gh.name)
      GH_EMAIL: $(gh.email)

  - script: |
      pip install -e .
    displayName: Install pyvista

  - script: |      
      .ci/setup_headless_display.sh
      # python .ci/pyvista_test.py  # for debug
    displayName: Install headless display

  - script: |
      sudo apt-get install python3-tk pandoc
      pip install -r requirements_docs.txt
    displayName: 'Install dependencies'

  - script: |
      EXAMPLES_PATH=$(python -c "import pyvista; print(pyvista.EXAMPLES_PATH)")
      mkdir -p EXAMPLES_PATH
      echo "##vso[task.setvariable variable=EXAMPLES_PATH]$EXAMPLES_PATH"
      PYVISTA_VERSION=$(python -c "import io; exec(io.open('pyvista/_version.py').read()); print(__version__)")
      echo "##vso[task.setvariable variable=PYVISTA_VERSION]$PYVISTA_VERSION"
      echo $EXAMPLES_PATH
    displayName: 'Store location of pyvista downloads cache and version'

  - task: Cache@2
    inputs:
      key: 'PYVISTA_EXAMPLES_CACHE | "$(PYVISTA_VERSION)"'
      path: $(EXAMPLES_PATH)
    displayName: Build pyvista examples directory cache

  - task: Cache@2
    inputs:
      key: 'PYVISTA_DOC_EXAMPLES_CACHE | "$(PYVISTA_VERSION)"'
      path: '$(Build.SourcesDirectory)/doc/examples'
    displayName: Build pyvista doc examples cache

  # run this twice since VTK9 fails to close render windows
  - script: |
      make -C doc phtml || true  # will fail on VTK9
      make -C doc phtml -b coverage SPHINXOPTS="-W"
      cat doc/_build/coverage/python.txt
    displayName: 'Build documentation'

  # Push example notebooks to pyvista-examples
  - script: |
      pip install cookiecutter
      cookiecutter -f --no-input --config-file ./doc/pyvista-binder-config.yml -o .. https://github.com/pyvista/cookiecutter-pyvista-binder.git;
      rm -rf ../pyvista-examples/notebooks/
      cd doc
      find examples -type f -name '*.ipynb' | cpio -p -d -v ../../pyvista-examples/
      cd ../../pyvista-examples/
      git init
      git add .
      git commit -am "Azure CI commit ref $(Build.SourceVersion)"
      REMOTE="https://${GH_TOKEN}@github.com/pyvista/pyvista-examples"
      git remote add origin ${REMOTE}
      git push -uf origin main
      cd $BUILD_SOURCESDIRECTORY
    displayName: 'Upload binder examples'
    condition: and(succeeded(), contains(variables['Build.SourceBranch'], 'refs/tags/'))
    env:
      GH_TOKEN: $(gh.token)

  # Push example notebooks to pyvista-examples develop branch
  - script: |
      pip install cookiecutter
      cookiecutter -f --no-input --config-file ./doc/pyvista-binder-config.yml -o .. https://github.com/pyvista/cookiecutter-pyvista-binder.git;
      rm -rf ../pyvista-examples/notebooks/
      cd doc
      find examples -type f -name '*.ipynb' | cpio -p -d -v ../../pyvista-examples/
      cd ../../pyvista-examples/
      git init
      git checkout -b develop
      git add .
      git commit -am "Azure CI commit ref $(Build.SourceVersion)"
      REMOTE="https://${GH_TOKEN}@github.com/pyvista/pyvista-examples"
      git remote add origin ${REMOTE}
      git push -uf origin develop
      cd $BUILD_SOURCESDIRECTORY
    displayName: 'Upload binder examples to develop'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    env:
      GH_TOKEN: $(gh.token)

  # upload documentation to pyvista-docs gh-pages on tags
  - script: |
      git clone --depth 1 https://${GH_TOKEN}@github.com/pyvista/pyvista-docs.git
      cd pyvista-docs
      git gc --prune=now
      git remote prune origin
      rm -rf *
      cp -r $BUILD_SOURCESDIRECTORY/doc/_build/html/* .
      cp $BUILD_SOURCESDIRECTORY/doc/README.md .
      cp $BUILD_SOURCESDIRECTORY/doc/ads.txt .
      touch .nojekyll
      echo "docs.pyvista.org" >> CNAME
      git add .
      git commit -am "Azure CI commit ref $(Build.SourceVersion)"
      git push
    displayName: Upload Documentation to pyvista-docs
    env:
      GH_TOKEN: $(gh.token)
    condition: and(succeeded(), contains(variables['Build.SourceBranch'], 'refs/tags/'))

  # upload documentation to pyvista-docs develop when merging with main
  - script: |
      mkdir pyvista-docs-dev
      cd pyvista-docs-dev
      git init
      git checkout -b gh-pages
      cp -r $BUILD_SOURCESDIRECTORY/doc/_build/html/* .
      cp $BUILD_SOURCESDIRECTORY/doc/README.md .
      cp $BUILD_SOURCESDIRECTORY/doc/ads.txt .
      touch .nojekyll
      echo "dev.pyvista.org" >> CNAME
      git add .
      REMOTE="https://${GH_TOKEN}@github.com/pyvista/pyvista-docs-dev"
      git remote add origin ${REMOTE}
      git commit -am "Azure CI commit ref $(Build.SourceVersion)"
      git push -uf origin gh-pages
    displayName: Upload Documentation to pyvista-docs-dev
    env:
      GH_TOKEN: $(gh.token)
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))

  # don't run job on no-ci builds
  condition: not(contains(variables['System.PullRequest.SourceBranch'], 'no-ci'))
