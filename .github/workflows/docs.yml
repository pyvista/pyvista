name: Build Documentation
on:
  pull_request:  # Uses cache
  workflow_dispatch:  # Able to not use cache by user demand
    inputs:
      cache:
        description: 'Use build cache'
        required: false
        default: true
  # No cache enabled for `schedule` and `push`
  schedule:
    - cron: '0 0 1 * *'  # once a month on main
  push:
    tags:
      - '*'
    branches:
      - main

env:
  USE_CACHE: ${{ (github.event_name == 'workflow_dispatch' && github.event.inputs.cache == 'true') || (github.event_name == 'pull_request') || (github.event_name == 'push') }}

jobs:
  doc:
    name: Build Documentation
    runs-on: ubuntu-latest
    env:
      PYVISTA_OFF_SCREEN: 'True'
      ALLOW_PLOTTING: true
      SHELLOPTS: 'errexit:pipefail'
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - uses: syphar/restore-virtualenv@v1
        id: cache-virtualenv
        with:
          requirement_files: requirements_docs.txt

      - name: Install OS Packages
        run: |
          sudo apt-get update
          sudo apt-get install libosmesa6-dev libgl1-mesa-dev python3-tk pandoc git-restore-mtime

      - name: Install OSMesa VTK
        run: pip install https://github.com/pyvista/pyvista-wheels/raw/add_v9_1_0/vtk-osmesa-9.1.0-cp38-cp38-linux_x86_64.whl

      - name: Install PyVista
        run: |
          pip install -e .
          git restore-mtime

      - name: Install Dependencies
        if: steps.cache-virtualenv.outputs.cache-hit != 'true'
        run: pip install -r requirements_docs.txt

      - name: PyVista Report
        run: |
          python -c "import pyvista;print(pyvista.Report())"
          echo PYVISTA_EXAMPLE_DATA_PATH=$(python -c "import pyvista; print(pyvista.EXAMPLES_PATH)") >> $GITHUB_ENV

      - name: Cache Sphinx-Gallery Examples
        uses: actions/cache@v2
        if: env.USE_CACHE == 'true'
        with:
          path: doc/examples/
          key: doc-examples-${{ hashFiles('pyvista/_version.py') }}

      - name: Cache docs _build directory
        uses: actions/cache@v2
        if: env.USE_CACHE == 'true'
        with:
          path: doc/_build/
          key: doc-_build-${{ hashFiles('pyvista/_version.py') }}-${{ hashFiles('doc/conf.py') }}

      - name: Cache example data
        uses: actions/cache@v2
        if: env.USE_CACHE == 'true'
        with:
          path: ${{ env.PYVISTA_EXAMPLE_DATA_PATH }}
          key: example-data-${{ hashFiles('pyvista/_version.py') }}

      - name: Cache autosummary
        uses: actions/cache@v2
        if: env.USE_CACHE == 'true'
        with:
          path: /**/_autosummary/*.rst
          key: autosummary-rst-${{ hashFiles('pyvista/_version.py') }}

      - name: Build Documentation
        run: make -C doc html SPHINXOPTS="-w build_errors.txt -N"

      - name: Check for Warnings
        run: python doc/print_errors.py

      - name: Tar build
        run: tar -zcvf docs-build.tar.gz doc/_build/

      - uses: actions/upload-artifact@v2
        with:
          name: docs-build
          path: docs-build.tar.gz

      - uses: actions/upload-artifact@v2
        with:
          name: examples
          path: doc/examples/
      - name: Get Notebooks
        run: |
          mkdir _notebooks
          find doc/examples -type f -name '*.ipynb' | cpio -p -d -v _notebooks/
      - uses: actions/upload-artifact@v2
        with:
          name: pyvista-notebooks
          path: _notebooks

  deploy:
    name: Publish Documentation
    runs-on: ubuntu-latest
    needs: doc
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags')
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: docs-build
          path: .
      - name: Untar build
        run: tar -xzvf docs-build.tar.gz
      - name: Copy meta data
        run: |
          cp doc/README.md doc/_build/html/
          cp doc/ads.txt doc/_build/html/

      - name: Deploy on main
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          external_repository: pyvista/pyvista-docs-dev
          personal_token: ${{ secrets.PYVISTA_BOT_TOKEN }}
          publish_dir: doc/_build/html/
          cname: dev.pyvista.org

      - name: Deploy on release
        if: startsWith(github.ref, 'refs/tags')
        uses: peaceiris/actions-gh-pages@v3
        with:
          external_repository: pyvista/pyvista-docs
          personal_token: ${{ secrets.PYVISTA_BOT_TOKEN }}
          publish_dir: doc/_build/html/
          cname: docs.pyvista.org

  publish-notebooks:
    name: Publish Notebooks for MyBinder
    runs-on: ubuntu-latest
    needs: doc
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags')
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      - name: Install Dependencies
        run: |
          pip install cookiecutter
      - uses: actions/download-artifact@v2
        with:
          name: pyvista-notebooks
          path: .

      - name: Make Cookiecutter
        run: |
          cookiecutter -f --no-input --config-file ./doc/pyvista-binder-config.yml https://github.com/pyvista/cookiecutter-pyvista-binder.git;
          rm -rf ./pyvista-examples/notebooks/
          cp -r doc/examples/ ./pyvista-examples/
          ls -l ./pyvista-examples/

      - name: Publish notebooks on main
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          external_repository: pyvista/pyvista-examples
          personal_token: ${{ secrets.PYVISTA_BOT_TOKEN }}
          publish_dir: pyvista-examples
          publish_branch: develop
          exclude_assets: ''

      - name: Publish notebooks on release
        if: startsWith(github.ref, 'refs/tags')
        uses: peaceiris/actions-gh-pages@v3
        with:
          external_repository: pyvista/pyvista-examples
          personal_token: ${{ secrets.PYVISTA_BOT_TOKEN }}
          publish_dir: pyvista-examples
          publish_branch: master
          exclude_assets: ''
