name: Build Documentation
on:
  pull_request:
    branches-ignore:
      - 'no-ci/**'
      - 'junk/**'
  workflow_dispatch:
    inputs:
      cache:
        description: 'Use build cache'
        required: false
        default: true
  schedule:
    - cron: "0 0 1 * *"  # once a month on main
  push:
    tags:
      - "*"

env:
  USE_CACHE: ${{ (github.event_name == 'workflow_dispatch' && github.event.inputs.cache) || (github.event_name != 'push' && github.event_name != 'workflow_dispatch') }}

jobs:
  doc:
    name: Build Documentation
    runs-on: ubuntu-latest
    env:
      PYVISTA_OFF_SCREEN: 'True'
      ALLOW_PLOTTING: true
      SHELLOPTS: 'errexit:pipefail'
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Cache Python Virtual Enviornment
        uses: actions/cache@v2
        if: env.USE_CACHE
        with:
          key: pythonvenv-${{ hashFiles('requirements_docs.txt') }}

      - uses: syphar/restore-virtualenv@v1
        id: cache-virtualenv
        with:
          requirement_files: requirements_docs.txt

      - name: Install OS Packages
        run: sudo apt-get install libosmesa6-dev libgl1-mesa-dev python3-tk pandoc

      - name: Install OSMesa VTK
        run: pip install https://github.com/pyvista/pyvista-wheels/raw/add_v9_1_0/vtk-osmesa-9.1.0-cp38-cp38-linux_x86_64.whl

      - name: Install PyVista
        run: pip install -e .

      - name: Install Dependencies
        if: steps.cache-virtualenv.outputs.cache-hit != 'true'
        run: pip install -r requirements_docs.txt

      - name: PyVista Report
        run: |
          python -c "import pyvista;print(pyvista.Report())"
          echo PYVISTA_EXAMPLE_DATA_PATH=$(python -c "import pyvista; print(pyvista.EXAMPLES_PATH)") >> $GITHUB_ENV

      - name: Cache Sphinx-Gallery Examples
        uses: actions/cache@v2
        if: env.USE_CACHE
        with:
          path: doc/examples/
          key: doc-examples-${{ hashFiles('pyvista/_version.py') }}

      - name: Cache docs _build directory
        uses: actions/cache@v2
        if: env.USE_CACHE
        with:
          path: doc/_build/
          key: doc-_build-${{ hashFiles('pyvista/_version.py') }}-${{ hashFiles('doc/conf.py') }}

      - name: Cache example data
        uses: actions/cache@v2
        if: env.USE_CACHE
        with:
          path: ${{ env.PYVISTA_EXAMPLE_DATA_PATH }}
          key: example-data-${{ hashFiles('pyvista/_version.py') }}

      - name: Build Documentation
        run: make -C doc html SPHINXOPTS="-w build_errors.txt -N"

      - name: Check for Warnings
        run: python doc/print_errors.py

      - name: Tar build
        run: tar -zcvf docs-build.tar.gz doc/_build/

      - uses: actions/upload-artifact@v2
        with:
          name: docs-build
          path: docs-build.tar.gz

      - uses: actions/upload-artifact@v2
        with:
          name: examples
          path: doc/examples/
      - name: Get Notebooks
        run: |
          mkdir _notebooks
          cp doc/examples/**/*.ipynb _notebooks/
      - uses: actions/upload-artifact@v2
        with:
          name: pyvista-notebooks
          path: _notebooks

  deploy:
    name: Publish Documentation
    runs-on: ubuntu-latest
    needs: doc
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags')
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: docs-build
          path: .
      # TODO: check this
      - name: Untar build
        run: |
          ls -l
          tar -xzvf docs-build.tar.gz
      - name: Copy meta data
        run: |
          cp doc/README.md ./html/
          cp doc/ads.txt ./html/

      - name: Make CNAME for dev.pyvista.org
        run: echo "dev.pyvista.org" > ./html/CNAME
      - name: Deploy on main
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          external_repository: pyvista/pyvista-docs-dev
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: html

      - name: Make CNAME for docs.pyvista.org
        run: echo "docs.pyvista.org" > ./html/CNAME
      - name: Deploy on release
        if: startsWith(github.ref, 'refs/tags')
        uses: peaceiris/actions-gh-pages@v3
        with:
          external_repository: pyvista/pyvista-docs
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: html

  publish-notebooks:
    name: Publish Notebooks for MyBinder
    runs-on: ubuntu-latest
    needs: doc
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags')
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      - name: Install Dependencies
        run: |
          pip install cookiecutter
      - uses: actions/download-artifact@v2
        with:
          name: pyvista-notebooks
          path: .

      - name: Publish notebooks on main
        if: startsWith(github.ref, 'refs/tags')
        run: |
          cookiecutter -f --no-input --config-file ./doc/pyvista-binder-config.yml -o .. https://github.com/pyvista/cookiecutter-pyvista-binder.git;
          rm -rf ../pyvista-examples/notebooks/
          cd doc
          cp _notebooks/ ../../pyvista-examples/
          cd ../../pyvista-examples/
          git init
          git checkout -b develop
          git add .
          git commit -am "GitHub Actions CI commit ref ${{ github.sha }}"
          REMOTE="https://${{ secrets.GITHUB_TOKEN }}@github.com/pyvista/pyvista-examples"
          git remote add origin ${REMOTE}
          git push -uf origin main

      - name: Publish notebooks on release
        if: startsWith(github.ref, 'refs/tags')
        run: |
          cookiecutter -f --no-input --config-file ./doc/pyvista-binder-config.yml -o .. https://github.com/pyvista/cookiecutter-pyvista-binder.git;
          rm -rf ../pyvista-examples/notebooks/
          cd doc
          cp _notebooks/ ../../pyvista-examples/
          cd ../../pyvista-examples/
          git init
          git add .
          git commit -am "GitHub Actions CI commit ref ${{ github.sha }}"
          REMOTE="https://${{ secrets.GITHUB_TOKEN }}@github.com/pyvista/pyvista-examples"
          git remote add origin ${REMOTE}
          git push -uf origin main
