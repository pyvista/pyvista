name: Unit Testing and Deployment

on:
  pull_request:
  workflow_dispatch:
  schedule:
    - cron: "0 4 * * *"
  push:
    tags:
      - "*"
    branches:
      - main

env:
  ALLOW_PLOTTING: true
  SHELLOPTS: 'errexit:pipefail'

jobs:
  macOS:
    runs-on: macos-latest
    name: Mac OS Unit Testing
    strategy:
      matrix:
        python-version: ['3.7', '3.8']

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}

      - uses: actions/cache@v2
        with:
          path: ~/Library/Caches/pip
          key: Python-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('setup.py') }}-${{ hashFiles('requirements_test.txt') }}
          restore-keys: |
            Python-${{ runner.os }}-${{ matrix.python-version }}

      - name: Install PyVista
        run: |
          pip install wheel
          pip install -e .
          python -c "import pyvista; print(pyvista.Report(gpu=False))"
          python -c "import pyvista; print(pyvista.EXAMPLES_PATH)"

      - name: Install test dependencies
        run: |
          pip install -r requirements_test.txt

      - name: Test Core API
        run: |
          pytest -v --ignore=tests/plotting

      - name: Test Plotting
        run: |
          pytest -v tests/plotting


  LinuxConda:
    runs-on: ubuntu-latest
    env:
      CONDA_ALWAYS_YES: 1
      VTK_VERSION: 8.2
      conda_env: pyvista-vtk8.2
      DISPLAY: ':99.0'
      PYVISTA_OFF_SCREEN: True

    steps:
      - uses: actions/checkout@v2

      - name: Set up headless display
        uses: pyvista/setup-headless-display-action@v1

      - name: Cache Conda
        uses: actions/cache@v1
        with:
          path: ~/anaconda3/pkgs
          key: Conda-${{ runner.os }}-${{ hashFiles('environment.yml') }}
          restore-keys: |
            ${{ runner.os }}-conda-

      - uses: actions/cache@v2
        with:
          path: ~/.local/share/pyvista/examples
          key: Examples-${{ hashFiles('*') }}
          restore-keys: |
            Examples-

      - name: Create Anaconda environment
        run: |
          source /usr/share/miniconda/etc/profile.d/conda.sh
          conda config --add channels conda-forge
          conda config --set channel_priority strict
          sed -i -e 's/- vtk$/- vtk= ${{ env.VTK_VERSION }} /' environment.yml
          conda env create --quiet -n ${{ env.conda_env }} --file environment.yml
          conda activate ${{ env.conda_env }}
          conda list

      - name: Install PyVista
        run: |
          source /usr/share/miniconda/etc/profile.d/conda.sh
          conda activate ${{ env.conda_env }}
          pip install -e .
          which python
          python -c "import pyvista; print(pyvista.Report(gpu=False))"
          python -c "import pyvista; print(pyvista.EXAMPLES_PATH)"

      - name: Test Core API
        continue-on-error: true
        run: |
          source /usr/share/miniconda/etc/profile.d/conda.sh
          conda activate ${{ env.conda_env }}
          pip install -r requirements_test.txt
          pytest -v --ignore=tests/plotting

      - name: Test Core Plotting
        continue-on-error: true
        run: |
          source /usr/share/miniconda/etc/profile.d/conda.sh
          conda activate ${{ env.conda_env }}
          pytest -v tests/plotting --cov-report html

      - name: Test Package Docstrings
        continue-on-error: true
        run: |
          source /usr/share/miniconda/etc/profile.d/conda.sh
          conda activate ${{ env.conda_env }}
          pytest -v --doctest-modules pyvista

  Linux:
    name: Linux Unit Testing
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.7', '3.8', '3.9']
        vtk-version: ['latest']
        include:
          - python-version: '3.9'
            vtk-version: '9.0.3'
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}

      - uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: Python-${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.vtk-version }}-${{ hashFiles('setup.py') }}-${{ hashFiles('requirements_test.txt') }}
          restore-keys: |
            Python-${{ runner.os }}-${{ matrix.python-version }}

      - uses: actions/cache@v2
        with:
          path: ~/.local/share/pyvista/examples
          key: Examples-${{ hashFiles('*') }}
          restore-keys: |
            Examples-

      - name: Build wheel and install pyvista
        run: |
          pip install wheel
          python setup.py bdist_wheel
          pip install dist/pyvista*.whl

      - name: Set up vtk
        if: ${{ matrix.vtk-version != 'latest' }}
        run: pip install vtk==${{ matrix.vtk-version }}

      - name: Install Testing Requirements
        run: |
          sudo apt-get update
          sudo apt-get install libgl1-mesa-glx xvfb python-tk -y
          pip install -r requirements_test.txt

      - name: Software Report
        run: |
          xvfb-run python -c "import pyvista; print(pyvista.Report())"
          xvfb-run python -c "import pyvista; print(pyvista.EXAMPLES_PATH)"
          which python
          pip list

      - name: Unit Testing
        run: |
          xvfb-run pytest -v --cov pyvista --cov-report xml

      - uses: codecov/codecov-action@v2
        if: matrix.python-version == '3.8'
        name: 'Upload coverage to CodeCov'

      - name: Check package
        run: |
          pip install twine
          python setup.py sdist
          twine check dist/*

      - name: Upload to PyPi
        if: matrix.python-version == '3.9' && startsWith(github.ref, 'refs/tags')
        run: |
          twine upload --skip-existing dist/pyvista*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
          TWINE_REPOSITORY_URL: "https://upload.pypi.org/legacy/"

  windows:
    name: Windows Unit Testing
    runs-on: windows-2019
    env:
      CI_WINDOWS: true
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.7, 3.8, 3.9]
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Set pip cache dir as env variable
        run: |
          chcp 65001 #set code page to utf-8
          echo ("PIP_CACHE_DIR=" + $(pip cache dir)) >> $env:GITHUB_ENV

      - name: Restore pip cache dir
        uses: actions/cache@v2
        with:
          path: ${{ env.PIP_CACHE_DIR }}
          key: Python-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('setup.py') }}-${{ hashFiles('requirements_test.txt') }}
          restore-keys: |
            Python-${{ runner.os }}-${{ matrix.python-version }}

      - name: Set up headless display
        uses: pyvista/setup-headless-display-action@v1

      - name: Install PyVista
        run: |
          pip install wheel
          pip install .
          python -c "import pyvista; print(pyvista.Report(gpu=False))"
          python -c "import pyvista; print(pyvista.EXAMPLES_PATH)"

      - name: Set example data path as env variable
        run: |
          chcp 65001 #set code page to utf-8
          echo ("PYVISTA_EXAMPLE_DATA_PATH=" + $(python -c "import pyvista; print(pyvista.EXAMPLES_PATH)")) >> $env:GITHUB_ENV

      - name: Cache example data
        uses: actions/cache@v2
        with:
          path: ${{ env.PYVISTA_EXAMPLE_DATA_PATH }}
          key: Examples-${{ hashFiles('*') }}
          restore-keys: |
            Examples-

      - name: Install test dependencies
        run: pip install -r requirements_test.txt

      - name: Test Core API
        run: python -m pytest --cov -v .
