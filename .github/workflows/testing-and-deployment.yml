name: Unit Testing and Deployment

# zizmor ignore note: All caching for pushes to main should be disabled with the `USE_CACHE` env var
on: # zizmor: ignore[cache-poisoning]
  pull_request:
  merge_group:
  workflow_dispatch:
  schedule:
    - cron: "0 4 * * *"
  push:
    tags:
      - "*"
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  ALLOW_PLOTTING: true
  SHELLOPTS: "errexit:pipefail"
  TOX_COLORED: "yes"
  USE_CACHE: ${{
    (
    (github.event_name == 'workflow_dispatch' && github.event.inputs.cache == 'true') ||
    (github.event_name == 'pull_request') ||
    (github.event_name == 'push')
    ) &&
    !startsWith(github.ref, 'refs/tags/v') &&
    !startsWith(github.ref, 'refs/heads/release/') &&
    !startsWith(github.ref, 'refs/heads/main')
    }}
  CACHE_FOLDER_NAME: vtk-data
  PYVISTA_VTK_DATA: ${{ github.workspace }}/vtk-data

permissions:
  id-token: none

jobs:
  cache-vtk-data:
    name: Cache vtk-data Repo
    strategy:
      fail-fast: false
      matrix:
        include:
          # need both self-hosted and github hosted to ensure cache is local to runners
          - runner-labels: "ubuntu-22.04-self-hosted"
          - runner-labels: "ubuntu-22.04"

    runs-on: ${{ matrix.runner-labels }}
    outputs:
      key: ${{ steps.restore-cache-vtk-data.outputs.cache-primary-key }}
    steps:
      - name: Get vtk-data commit
        run: echo VTK_DATA_COMMIT=$(git ls-remote https://github.com/pyvista/vtk-data HEAD | awk '{ print $1}') >> $GITHUB_ENV

      - name: Test if the example data cache exists
        id: restore-cache-vtk-data
        uses: actions/cache/restore@v4
        with:
          path: ${{ env.CACHE_FOLDER_NAME }}
          key: vtk-data-${{ env.VTK_DATA_COMMIT }}
          lookup-only: true

      - name: Clone vtk-data if the cache does not exists # zizmor: ignore[artipacked]
        if: steps.restore-cache-vtk-data.outputs.cache-hit != 'true'
        uses: actions/checkout@v5
        with:
          repository: pyvista/vtk-data
          path: ${{ env.CACHE_FOLDER_NAME }}

      - name: Create the example data cache
        if: steps.restore-cache-vtk-data.outputs.cache-hit != 'true'
        id: save-cache-vtk-data
        uses: actions/cache/save@v4
        with:
          path: ${{ env.CACHE_FOLDER_NAME }}
          key: vtk-data-${{ env.VTK_DATA_COMMIT }}
          enableCrossOsArchive: true

  Linux:
    name: Linux Unit Testing (${{ matrix.python-version }}, ${{ matrix.vtk-version }}, ${{ matrix.numpy-version }})
    runs-on: ${{ matrix.runner-labels }}
    needs: cache-vtk-data
    strategy:
      fail-fast: false

      # see discussion at https://github.com/pyvista/pyvista/issues/2867
      matrix:
        include:
          # numeric numpy versions are ~= conditions, e.g. "1.23" means "numpy~=1.23.0"
          - python-version: "3.10"
            vtk-version: "9.2.2"
            numpy-version: "1.26"
            runner-labels: "ubuntu-22.04-self-hosted"
          - python-version: "3.11"
            vtk-version: "9.2.6"
            numpy-version: "latest"
            runner-labels: "ubuntu-22.04-self-hosted"
          - python-version: "3.12"
            vtk-version: "9.3.1"
            numpy-version: "latest"
            runner-labels: "ubuntu-22.04-self-hosted"
          - python-version: "3.13"
            vtk-version: "9.4.2"
            numpy-version: "latest"
            runner-labels: "ubuntu-22.04-self-hosted"
          - python-version: "3.13"
            vtk-version: "latest"
            numpy-version: "nightly"
            runner-labels: "ubuntu-22.04-self-hosted"

    env:
      TOX_FACTOR: py${{matrix.python-version}}-numpy_${{matrix.numpy-version}}-vtk_${{matrix.vtk-version}}
      PIP_TRUSTED_HOST: devpi.devpi.svc.cluster.local
      PIP_INDEX_URL: http://devpi.devpi.svc.cluster.local:3141/root/pypi
      UV_INDEX: http://devpi.devpi.svc.cluster.local:3141/root/pypi
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 2
          persist-credentials: false

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - uses: awalsh128/cache-apt-pkgs-action@2c09a5e66da6c8016428a2172bd76e5e4f14bb17
        with:
          packages: xvfb
          version: 3.0

      - name: Cache example data
        uses: actions/cache/restore@v4
        with:
          path: ${{ env.CACHE_FOLDER_NAME }}
          key: ${{ needs.cache-vtk-data.outputs.key }}
          enableCrossOsArchive: true

      - name: Install tox-uv
        run: pip install tox-uv

      - name: Core Testing (no GL)
        run: tox run -e ${{env.TOX_FACTOR}}-cov-core # zizmor: ignore[template-injection]


      # - name: Plotting Testing (uses GL)
      #   if: ${{ !cancelled() }}
      #   run: xvfb-run tox run -e ${{env.TOX_FACTOR}}-cov-plotting # zizmor: ignore[template-injection]

      # - name: Upload Images for Failed Tests
      #   if: always()
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: failed_test_images-${{ github.job }}-${{ join(matrix.* , '-') }}
      #     path: _failed_test_images

      # - name: Upload Generated Images
      #   if: always()
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: generated_test_images-${{ github.job }}-${{ join(matrix.* , '-') }}
      #     path: _generated_test_images

      # - uses: codecov/codecov-action@fdcc8476540edceab3de004e990f80d881c6cc00
      #   name: "Upload coverage to CodeCov"
      #   env:
      #     CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      # - name: Check package
      #   run: |
      #     pip install build twine
      #     python -m build
      #     twine check --strict dist/*

      # - name: Upload to PyPi
      #   if: matrix.python-version == '3.10' && startsWith(github.ref, 'refs/tags/v')
      #   run: |
      #     twine upload --skip-existing dist/pyvista*
      #   env:
      #     TWINE_USERNAME: __token__
      #     TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
      #     TWINE_REPOSITORY_URL: "https://upload.pypi.org/legacy/"
